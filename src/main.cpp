#include <iostream>
#include "aes.h"
#include "debug.h"

using namespace std;

int main (){

    uint8_t bytes [] = {
        0xa0, 0xa1, 0xa2, 0xa3, 
        0xa4, 0xa5, 0xa6, 0xa7, 
        0xa8, 0xa9, 0xaa, 0xab, 
        0xac, 0xad, 0xae, 0xaf, 
        0xb0, 0xb1, 0xb2, 0xb3, 
        0xb4, 0xb5, 0xb6, 0xb7, 
        0xb8, 0xb9, 0xba, 0xbb, 
        0xbc, 0xbd, 0xbe, 0xbf, 
        0xc0, 0xc1, 0xc2, 0xc3, 
        0xc4, 0xc5, 0xc6, 0xc7, 
        0xc8, 0xc9, 0xca, 0xcb, 
        0xcc, 0xcd, 0xce, 0xcf, 
        0xd0, 0xd1, 0xd2, 0xd3, 
        0xd4, 0xd5, 0xd6, 0xd7, 
        0xd8, 0xd9, 0xda, 0xdb, 
        0xdc, 0xdd, 0xde, 0xdf
    };

    // expansion key test
    
    uint8_t key128 [] = { 
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49
    };

    uint8_t key192 [] = { 
        0x8e, 0x73, 0xb0, 0xf7, 
        0xda, 0x0e, 0x64, 0x52, 
        0xc8, 0x10, 0xf3, 0x2b, 
        0x80, 0x90, 0x79, 0xe5, 
        0x62, 0xf8, 0xea, 0xd2, 
        0x52, 0x2c, 0x6b, 0x7b 
    };

    uint8_t key256 [] = { 
        0x60, 0x3d, 0xeb, 0x10, 
        0x15, 0xca, 0x71, 0xbe, 
        0x2b, 0x73, 0xae, 0xf0, 
        0x85, 0x7d, 0x77, 0x81, 
        0x1f, 0x35, 0x2c, 0x07, 
        0x3b, 0x61, 0x08, 0xd7, 
        0x2d, 0x98, 0x10, 0xa3, 
        0x09, 0x14, 0xdf, 0xf4 
    };

    uint8_t iv [] = {
        0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c, 0x44, 0x69, 0x9e, 0xd7, 0xdb, 0x51, 0xb7, 0xd9
    };

    AES aes128 = AES(AESKeySize::AES_128, AESMode::CBC, key128, iv);
    AES aes192 = AES(AESKeySize::AES_192, AESMode::CBC, key192, iv);
    AES aes256 = AES(AESKeySize::AES_256, AESMode::CBC, key256, iv);

    aes128.Encrypt(bytes, sizeof(bytes));

    DEBUG_BUFFER("encrypted", bytes, sizeof(bytes))

    aes128.SetIv(iv);

    aes128.Decrypt(bytes, sizeof(bytes));

    DEBUG_BUFFER("decrypted", bytes, sizeof(bytes))

    return 0;
}